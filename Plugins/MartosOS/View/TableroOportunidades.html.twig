
{% block body %}
<div id="opp_form-token-provider" class="d-none">{{ formToken() }}</div>

<div class="container-fluid">
    {# BARRA DE FILTROS #}
    <div class="row bg-light p-2 mb-3 border rounded align-items-end g-2">
        <div class="col-md-3">
            <div class="input-group">
                <span class="input-group-text"><i class="fa-solid fa-search fa-fw"></i></span>
                <input type="text" id="filterQuery" class="form-control" placeholder="Buscar por nombre o cliente">
            </div>
        </div>
        <div class="col-md-2">
            <div class="input-group">
                <span class="input-group-text"><i class="fa-solid fa-user fa-fw"></i></span>
                <select id="filterAgent" class="form-select">
                    <option value="all">Todos los comerciales</option>
                    {% for agente in fsc.agentes %}
                        <option value="{{ agente.codagente }}">{{ agente.nombre }}</option>
                    {% endfor %}
                </select>
            </div>
        </div>
        <div class="col-md-2">
            <div class="input-group">
                <span class="input-group-text"><i class="fa-solid fa-calendar-day fa-fw"></i></span>
                <input type="date" id="filterFechaDesde" class="form-control" placeholder="Desde">
            </div>
        </div>
        <div class="col-md-2">
            <div class="input-group">
                <span class="input-group-text"><i class="fa-solid fa-calendar-check fa-fw"></i></span>
                <input type="date" id="filterFechaHasta" class="form-control" placeholder="Hasta">
            </div>
        </div>
        <div class="col-md-1 text-end">
            <button type="button" id="clearFiltersBtn" class="btn btn-outline-secondary">
                <i class="fa-solid fa-broom"></i>
            </button>
        </div>
    </div>


    <div class="text-end mb-3">
        <button id="opp_save-kanban-button" class="btn btn-primary">
            <i class="fa-solid fa-save fa-fw"></i> Guardar Cambios
        </button>
    </div>
    <div id="opp_kanban-container" style="border-top: 1px solid #dee2e6; padding-top: 1rem; background-color: #f8f9fa;">
        <div class="text-center py-5"><i class="fas fa-spinner fa-spin fa-3x"></i></div>
    </div>
</div>
 <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
<script src="https://code.jquery.com/ui/1.13.3/jquery-ui.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
{% endblock %}

{% block javascripts %}

<script src="{{ asset('/Plugins/MartosOS/Assets/JS/jkanban.js') }}"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
    let kanbanInstance;
    let boardsData = [];
    let itemsToDelete = new Set();

    // LOS NUEVOS IDs DE FILTROS
    const filterQuery = document.getElementById('filterQuery');
    const filterAgent = document.getElementById('filterAgent');
    const filterFechaDesde = document.getElementById('filterFechaDesde');
    const filterFechaHasta = document.getElementById('filterFechaHasta');
    const clearFiltersBtn = document.getElementById('clearFiltersBtn');
    const saveButton = document.getElementById('opp_save-kanban-button');
    const kanbanContainer = document.getElementById('opp_kanban-container');

    // ESTADO FILTROS
    let activeFilters = {
        query: '',
        codagente: 'all',
        fecha_desde: '',
        fecha_hasta: ''
    };

    function applyFilters() {
        activeFilters.query = filterQuery.value.trim();
        activeFilters.codagente = filterAgent.value;
        activeFilters.fecha_desde = filterFechaDesde.value;
        activeFilters.fecha_hasta = filterFechaHasta.value;
        loadKanbanData();
    }

    function clearFilters() {
        filterQuery.value = '';
        filterAgent.value = 'all';
        filterFechaDesde.value = '';
        filterFechaHasta.value = '';
        applyFilters();
    }

    // EVENTOS
    filterQuery.addEventListener('keyup', (e) => { if (e.key === 'Enter') applyFilters(); });
    filterAgent.addEventListener('change', applyFilters);
    filterFechaDesde.addEventListener('change', applyFilters);
    filterFechaHasta.addEventListener('change', applyFilters);
    clearFiltersBtn.addEventListener('click', clearFilters);

    // --- FUNCIÓN PRINCIPAL ---
    function loadKanbanData() {
        kanbanContainer.innerHTML = '<div class="text-center py-5"><i class="fas fa-spinner fa-spin fa-3x"></i></div>';
        const params = new URLSearchParams({
            query: activeFilters.query,
            codagente: activeFilters.codagente,
            fecha_desde: activeFilters.fecha_desde,
            fecha_hasta: activeFilters.fecha_hasta
        }).toString();
        const apiUrl = `DashboardCRM?action=getKanbanDataAjax&${params}`;
        fetch(apiUrl)
            .then(response => response.json())
            .then(initialData => {
                boardsData = initialData;
                kanbanContainer.innerHTML = '';
                kanbanInstance = new jKanban({
                    element: '#opp_kanban-container',
                    gutter: '15px',
                    widthBoard: '320px',
                    boards: boardsData,
                    click: function(el) {},
                    buttonClick: handleNewItemClick,
                    itemAddOptions: {
                        enabled: true,
                        content: '+ Nueva Oportunidad',
                        class: 'btn btn-sm btn-secondary mt-2',
                        footer: true
                    }
                });
                renderAllCardsAsDisplay();
            })
            .catch(error => {
                kanbanContainer.innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
            });
    }

    // --- LÓGICA DE INTERACCIÓN ---
    function handleNewItemClick(el, boardId) {
        const tempId = 'new-' + Date.now();
        const newItemData = { 
            id: tempId, 
            title: '', 
            valor: '', 
            fecha_cierre: '', 
            cliente: '', 
            codcliente: '', 
            probabilidad: 50,
            codagente: '', 
            nombre_agente: '', 
            proxima_actividad: '',
            alerta_inactividad: false
        };
        const board = boardsData.find(b => b.id === boardId);
        if (board) board.item.push(newItemData);
        kanbanInstance.addElement(boardId, { id: tempId, title: '' });
        const newItemEl = kanbanContainer.querySelector(`[data-eid="${tempId}"]`);
        if (newItemEl) renderCardAsForm(newItemEl, newItemData);
    }

    kanbanContainer.addEventListener('click', function (event) {
        const cardEl = event.target.closest('.kanban-item');
        if (!cardEl) return;
        const itemId = cardEl.dataset.eid;

        if (event.target.matches('.delete-item-btn, .delete-item-btn *')) {
            event.stopPropagation();
            if (confirm('¿Marcar para eliminar?')) {
                if (itemId.startsWith('new-')) {
                    removeLocalItemData(itemId);
                    kanbanInstance.removeElement(itemId);
                } else {
                    itemsToDelete.add(itemId);
                    cardEl.classList.add('to-be-deleted');
                }
            }
        } else if (event.target.matches('.save-inline-btn, .save-inline-btn *')) {
            event.stopPropagation();
            const itemData = getItemDataFromForm(cardEl, itemId);
            updateLocalItemData(itemData);
            renderCardAsDisplay(cardEl, itemData);
        } else if (event.target.matches('.cancel-inline-btn, .cancel-inline-btn *')) {
            event.stopPropagation();
            if (itemId.startsWith('new-')) {
                removeLocalItemData(itemId);
                kanbanInstance.removeElement(itemId);
            } else {
                renderCardAsDisplay(cardEl, findItemById(itemId));
            }
        } else if (!cardEl.querySelector('form')) {
            renderCardAsForm(cardEl, findItemById(itemId));
        }
    });

    // --- FUNCIONES DE RENDERIZADO ---
    function renderAllCardsAsDisplay() {
        document.querySelectorAll('.kanban-item').forEach(itemEl => {
            const itemData = findItemById(itemEl.dataset.eid);
            if (itemData) renderCardAsDisplay(itemEl, itemData);
        });
    }

    function renderCardAsDisplay(cardEl, data) {
        cardEl.innerHTML = getCardDisplayHtml(data);
    }

    function renderCardAsForm(cardEl, data) {
    // Normaliza fecha a 'YYYY-MM-DD' SIEMPRE
    let fechaValue = '';
        if (data.fecha_cierre) {
            if (/^\d{4}-\d{2}-\d{2}$/.test(data.fecha_cierre)) {
                // Caso bueno: "2025-08-01"
                fechaValue = data.fecha_cierre;
            } else if (/^\d{2}-\d{2}-\d{4}$/.test(data.fecha_cierre)) {
                // Caso "15-04-2222"
                const [dd, mm, yyyy] = data.fecha_cierre.split('-');
                fechaValue = `${yyyy}-${mm}-${dd}`;
            } else {
                let d = new Date(data.fecha_cierre);
                if (!isNaN(d.getTime())) {
                    fechaValue = new Date(d.getTime() - d.getTimezoneOffset() * 60000).toISOString().slice(0, 10);
                }
            }
        }
        console.log('DEBUG NORMALIZADO:', data.fecha_cierre, '->', fechaValue);


    cardEl.innerHTML = `
        <form class="inline-item-form" onsubmit="return false;">
            <input type="hidden" name="codcliente" value="${data.codcliente || ''}">
            <input type="hidden" name="codagente" value="${data.codagente || ''}">
            <div class="mb-2">
                <label class="form-label form-label-sm">Título</label>
                <input type="text" name="title" class="form-control form-control-sm" value="${data.title || ''}" required>
            </div>
            <div class="mb-2">
                <label class="form-label form-label-sm">Cliente</label>
                <input type="text" name="nombre_cliente" class="form-control form-control-sm" placeholder="Buscar cliente..." value="${data.cliente || ''}">
            </div>
            <div class="mb-2">
                <label class="form-label form-label-sm">Agente</label>
                <input type="text" name="nombre_agente" class="form-control form-control-sm" placeholder="Buscar agente..." value="${data.nombre_agente || ''}">
            </div>
            <div class="row gx-2 mb-2">
                <div class="col">
                    <label class="form-label form-label-sm">Valor</label>
                    <input type="number" name="valor" class="form-control form-control-sm" value="${data.valor || ''}">
                </div>
                <div class="col">
                    <label class="form-label form-label-sm">Prob. %</label>
                    <input type="number" name="probabilidad" class="form-control form-control-sm" value="${data.probabilidad || ''}" min="0" max="100">
                </div>
            </div>
            <div class="mb-2">
                <label class="form-label form-label-sm">Cierre Previsto</label>
                <input type="date" name="fecha_cierre" class="form-control form-control-sm" value="${fechaValue}">
            </div>
            <div class="text-end">
                <button type="button" class="btn btn-sm btn-light cancel-inline-btn">Cancelar</button>
                <button type="button" class="btn btn-sm btn-success save-inline-btn">OK</button>
            </div>
        </form>`;

    // --- Autocompletado para Clientes ---
    const clienteSearch = $(cardEl).find('input[name="nombre_cliente"]');
    const clienteHidden = $(cardEl).find('input[name="codcliente"]');
    clienteSearch.autocomplete({
        source: 'DashboardCRM?action=searchClientesAjax',
        minLength: 1,
        select: function (event, ui) {
            clienteHidden.val(ui.item.value);
            $(this).val(ui.item.label);
            return false;
        }
    });

    // --- Autocompletado para Agentes ---
    const agenteSearch = $(cardEl).find('input[name="nombre_agente"]');
    const agenteHidden = $(cardEl).find('input[name="codagente"]');
    agenteSearch.autocomplete({
        source: 'DashboardCRM?action=searchAgentesAjax',
        minLength: 1,
        select: function (event, ui) {
            agenteHidden.val(ui.item.value);
            $(this).val(ui.item.label);
            return false;
        }
    });
}



    function getCardDisplayHtml(data) {

    let fechaFmt = 'N/A';
        if (data.fecha_cierre) {
            // DD-MM-YYYY
            if (/^\d{2}-\d{2}-\d{4}$/.test(data.fecha_cierre)) {
                const [dd, mm, yyyy] = data.fecha_cierre.split('-');
                fechaFmt = new Date(Date.UTC(yyyy, mm - 1, dd)).toLocaleDateString('es-ES');
            }
            // YYYY-MM-DD
            else if (/^\d{4}-\d{2}-\d{2}$/.test(data.fecha_cierre)) {
                const [yyyy, mm, dd] = data.fecha_cierre.split('-');
                fechaFmt = new Date(Date.UTC(yyyy, mm - 1, dd)).toLocaleDateString('es-ES');
            }
            else {
                let d = new Date(data.fecha_cierre);
                fechaFmt = isNaN(d.getTime()) ? 'N/A' : d.toLocaleDateString('es-ES');
            }
        }
    let valorFmt = data.valor ? new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' }).format(data.valor) : '-';
    let alertaHtml = data.alerta_inactividad ? '<span class="text-danger" title="Inactiva por mucho tiempo">🔥</span>' : '';

    return `
        <div class="delete-item-btn" title="Eliminar"><i class="fa-solid fa-trash-alt"></i></div>
        <div class="card-main-content">
            <div class='card-subject'>${alertaHtml} ${data.title || '(Sin título)'}</div>
            <div class='card-description'>${data.cliente || 'No asignado'}</div>
            <div class="card-agent-details">
                <small><i class="fa-solid fa-user fa-fw"></i> ${data.nombre_agente || 'Sin agente'}</small>
            </div>
            <div class='card-footer-details'>
                <small>Cierre: ${fechaFmt}</small>
                <small>${data.probabilidad || 0}%</small>
                <strong>${valorFmt}</strong>
            </div>
            <div class="card-next-activity"><small>Próx: ${data.proxima_actividad}</small></div>
        </div>`;
}


    // === ESTA ES LA FUNCIÓN CLAVE MODIFICADA ===
    function getCardEditHtml(data) {
        return `
            <form class="inline-item-form" onsubmit="return false;">
                <input type="hidden" name="codcliente" value="${data.codcliente || ''}">
                <input type="hidden" name="codagente" value="${data.codagente || ''}">
                <input type="hidden" name="codcliente" value="${data.codcliente || ''}">
                <input type="hidden" name="codagente" value="${data.codagente || ''}">

                <div class="mb-2"><label class="form-label form-label-sm">Título</label><input type="text" name="title" class="form-control form-control-sm" value="${data.title || ''}" required></div>
                <div class="mb-2"><label class="form-label form-label-sm">Cliente</label><input type="text" name="nombre_cliente" class="form-control form-control-sm" placeholder="Buscar cliente..." value="${data.cliente || ''}"></div>
                <div class="mb-2"><label class="form-label form-label-sm">Agente</label><input type="text" name="nombre_agente" class="form-control form-control-sm" placeholder="Buscar agente..." value="${data.nombre_agente || ''}"></div>
                
                <div class="row gx-2 mb-2">
                    <div class="col"><label class="form-label form-label-sm">Valor</label><input type="number" name="valor" class="form-control form-control-sm" value="${data.valor || ''}"></div>
                    <div class="col"><label class="form-label form-label-sm">Prob. %</label><input type="number" name="probabilidad" class="form-control form-control-sm" value="${data.probabilidad || ''}" min="0" max="100"></div>
                </div>
                <div class="mb-2"><label class="form-label form-label-sm">Cierre Previsto</label><input type="date" name="fecha_cierre" class="form-control form-control-sm" value="${data.fecha_cierre || ''}"></div>
                
                <div class="text-end">
                    <button type="button" class="btn btn-sm btn-light cancel-inline-btn">Cancelar</button>
                    <button type="button" class="btn btn-sm btn-success save-inline-btn">OK</button>
                </div>
            </form>`;
    }

    // --- LÓGICA DE GUARDADO ---
    saveButton.addEventListener('click', function() {
        const updates = [];
        const inserts = [];
        document.querySelectorAll('.kanban-board').forEach(boardEl => {
            const idEtapa = boardEl.dataset.id;
            boardEl.querySelectorAll('.kanban-item').forEach(itemEl => {
                const idItem = itemEl.dataset.eid;
                if (itemsToDelete.has(idItem)) return;
                const itemData = findItemById(idItem);
                if (!itemData || !itemData.title) return;
                const payload = { idEtapa: idEtapa, ...itemData };
                if (idItem.startsWith('new-')) {
                    inserts.push(payload);
                } else {
                    updates.push(payload);
                }
            });
        });
        saveKanbanState({ updates, inserts, deletes: Array.from(itemsToDelete) });
    });

    function saveKanbanState(state) {
        const saveUrl = `DashboardCRM?action=saveKanbanStateAjax`;
        const formData = new FormData();
        const freshToken = document.querySelector('#opp_form-token-provider input[name="multireqtoken"]').value;
        formData.append('kanbanState', JSON.stringify(state));
        formData.append('multireqtoken', freshToken);
        saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Guardando...';
        saveButton.disabled = true;
        fetch(saveUrl, { method: 'POST', body: formData })
            .then(response => response.json())
            .then(result => {
                if (result.status === 'ok') {
                    if(typeof setToast !== 'undefined') setToast(result.message, 'success');
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    if(typeof setToast !== 'undefined') setToast(result.message, 'error');
                    saveButton.innerHTML = '<i class="fa-solid fa-save fa-fw"></i> Guardar Cambios';
                    saveButton.disabled = false;
                }
            });
    }

    // --- FUNCIONES AUXILIARES ---
    function getItemDataFromForm(cardEl, itemId) {
    const form = cardEl.querySelector('form');
    const originalData = findItemById(itemId);

    const datos = {
        id: itemId,
        title: form.elements.title.value,
        valor: form.elements.valor.value,
        fecha_cierre: form.elements.fecha_cierre.value,
        probabilidad: form.elements.probabilidad.value,
        codcliente: form.elements.codcliente.value,
        cliente: form.elements.nombre_cliente.value,
        codagente: form.elements.codagente.value,
        nombre_agente: form.elements.nombre_agente.value,
        proxima_actividad: originalData.proxima_actividad,
        alerta_inactividad: originalData.alerta_inactividad
    };
    console.log("Datos recogidos del form:", datos);  // <-- AÑADE ESTO
    return datos;
}

    function findItemById(itemId) {
        for (const board of boardsData) {
            const found = board.item.find(item => item.id == itemId);
            if (found) return found;
        }
        return null;
    }

    function updateLocalItemData(newData) {
        boardsData.forEach(board => {
            const index = board.item.findIndex(item => item.id == newData.id);
            if (index !== -1) {
                board.item[index] = { ...board.item[index], ...newData };
            }
        });
    }
    
    function removeLocalItemData(itemId) {
        boardsData.forEach(board => {
            board.item = board.item.filter(item => item.id != itemId);
        });
    }

   
    
    // Carga inicial
    loadKanbanData();
});
</script>
<style>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community@31.4.1/styles/ag-grid.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community@31.4.1/styles/ag-theme-alpine.css">
<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.3/themes/base/jquery-ui.css">

    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.3/themes/base/jquery-ui.css">
<link rel="stylesheet" href="{{ asset('/Plugins/MartosOS/Assets/CSS/jkanban.css') }}">
<style>
    /* Los estilos CSS están bien, no necesitan cambios. */
    #kanban-container { white-space: nowrap; overflow-x: auto; padding-bottom: 15px; display: flex;}
    .kanban-board { padding-bottom: 50px; overflow: hidden; width: 280px !important; border-radius: 8px; margin: 5px; background-color: #e4edff63; display: inline-block; vertical-align: top; white-space: normal; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24); }
    .kanban-board header { padding: 10px; padding-left: 30px; margin-bottom: -10px; border-bottom: none !important; }
    .kanban-title-board { color: #333; font-size: 16px; font-weight: bold; cursor: default; }
    .kanban-drag { min-height: 380px; padding: 10px; }
    .kanban-item { color: #333; position: relative; background-color: #fff; box-sizing: border-box; width: 100%; padding: 10px 10px 10px 15px; margin-bottom: 10px; cursor: pointer; border-radius: 4px; box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24); }
    .inline-opp-form { padding-top: 10px; }
    .card-main-content { width: 100%; }
    .card-subject { padding-bottom: 5px; font-weight: 700; font-size: 0.9em; }
    .card-subject a { color: inherit; text-decoration: none; }
    .card-subject a:hover { text-decoration: underline; }
    .card-description { opacity: 0.8; font-size: 0.8em; margin-bottom: 8px; white-space: normal; word-break: break-word; }
    .card-footer-details { font-size: 0.8em; color: #6c757d; text-align: right; border-top: 1px solid #eee; padding-top: 5px; margin-top: 5px; display: flex; flex-direction: row; justify-content: space-between; }
    .delete-opp-btn { position: absolute; top: 5px; right: 5px; cursor: pointer; color: #aaa; display: none; padding: 5px; }
    .kanban-item:hover .delete-opp-btn { display: block; }
    .delete-opp-btn:hover { color: #dc3545; }
    .to-be-deleted { opacity: 0.5; border: 2px dashed #dc3545; background-color: #ff000020; }
    .ui-autocomplete {z-index: 1051; }
    /* Baja el z-index del modal */
.modal {
    z-index: 1045 !important;
}
/* Baja el z-index del backdrop si lo necesitas también */
.modal-backdrop {
    z-index: 1044 !important;
}
</style>
{% endblock %}