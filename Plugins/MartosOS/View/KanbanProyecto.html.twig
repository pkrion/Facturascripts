{# Archivo: plugins/MartosOS/View/KanbanProyecto.html.twig (Versión Final y Completa) #}

<div class="container-fluid">
    <div class="text-end mb-3">
        <button id="save-kanban-button" class="btn btn-primary">
            <i class="fa-solid fa-save fa-fw"></i> Guardar Cambios
        </button>
    </div>
    <div id="kanban-container" style="border-top: 1px solid #dee2e6; padding-top: 1rem; background-color: #f8f9fa;">
        <div class="text-center py-5">
            <i class="fas fa-spinner fa-spin fa-3x"></i>
            <p class="mt-3">Cargando tablero Kanban...</p>
        </div>
    </div>
</div>

{% block javascripts %}
    <script src="{{ asset('/Plugins/MartosOS/Assets/JS/jkanban.js') }}"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        let kanbanInstance;
        let boardsData = [];
        let tasksToDelete = new Set();
        const projectId = '{{ fsc.model.idproyecto }}';
        const apiUrl = `EditProyecto?action=getKanbanDataAjax&code=${projectId}`;
        const saveButton = document.getElementById('save-kanban-button');
        const kanbanContainer = document.getElementById('kanban-container');

        // --- 1. CARGA INICIAL ---
        fetch(apiUrl)
            .then(response => response.json())
            .then(initialData => {
                if (initialData.error) throw new Error(initialData.error);
                boardsData = initialData;
                kanbanContainer.innerHTML = '';
                kanbanInstance = new jKanban({
                    element: '#kanban-container',
                    gutter: '15px',
                    widthBoard: '280px',
                    boards: boardsData,
                    dropEl: function (el, target, source, sibling) {},
                    buttonClick: handleNewTaskClick,
                    itemAddOptions: {
                        enabled: true,
                        content: '+ Añadir Tarea',
                        class: 'btn btn-sm btn-secondary mt-2 nuevat',
                        footer: true
                    }
                });
                personalizeCards();
                addEventListeners();
                colorearHeadersPorTitulo();

            })
            .catch(error => {
                console.error('Error al cargar datos:', error);
                kanbanContainer.innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
            });

         // --- 2. LÓGICA DE INTERACCIÓN (Con correcciones) ---
        function handleNewTaskClick(el, boardId) {
            const tempId = 'new-' + Date.now();
            const newTaskData = { id: tempId, title: '', description: '', category: '', dueDate: '' };
            
            // --- ¡CORRECCIÓN CLAVE 1! ---
            // Añadimos la nueva tarea a nuestro array de datos local ANTES de renderizarla.
            const board = boardsData.find(b => b.id === boardId);
            if(board) {
                board.item.push(newTaskData);
            }

            kanbanInstance.addElement(boardId, { id: tempId, title: '' });
            const newItemEl = kanbanContainer.querySelector(`[data-eid="${tempId}"]`);
            if(newItemEl) {
                renderCardAsForm(newItemEl, newTaskData);
            }
        }

        function handleCardClick(event) {
            const target = event.target;
            const cardEl = target.closest('.kanban-item');
            if (!cardEl) return;
            const taskId = cardEl.dataset.eid;

            if (target.matches('.delete-task-btn') || target.closest('.delete-task-btn')) {
                event.stopPropagation();
                if (confirm('¿Marcar esta tarea para eliminar? Los cambios se aplicarán al guardar.')) {
                    if (taskId.startsWith('new-')) {
                        removeLocalTaskData(taskId);
                        kanbanInstance.removeElement(taskId);
                    } else {
                        tasksToDelete.add(taskId);
                        cardEl.classList.add('to-be-deleted');
                    }
                }
            }
            else if (target.matches('.save-inline-btn')) {
                event.stopPropagation();
                const taskData = getTaskDataFromForm(cardEl, taskId);
                updateLocalTaskData(taskData);
                renderCardAsDisplay(cardEl, taskData);
            }
            else if (target.matches('.cancel-inline-btn')) {
                event.stopPropagation();
                if (taskId.startsWith('new-')) {
                    removeLocalTaskData(taskId);
                    kanbanInstance.removeElement(taskId);
                } else {
                    const originalTaskData = findTaskById(taskId);
                    renderCardAsDisplay(cardEl, originalTaskData);
                }
            }
            else if (!cardEl.querySelector('form')) {
                const taskData = findTaskById(taskId);
                if (taskData) renderCardAsForm(cardEl, taskData);
            }
        }
            
            // --- 3. FUNCIONES DE RENDERIZADO (Sin cambios) ---

            function personalizeCards() {
                document.querySelectorAll('.kanban-item').forEach(itemEl => {
                    const taskId = itemEl.dataset.eid;
                    const taskData = findTaskById(taskId);
                    if (taskData) {
                        renderCardAsDisplay(itemEl, taskData);
                    }
                });
            }

            function renderCardAsDisplay(cardEl, taskData) {
                cardEl.innerHTML = getCardDisplayHtml(taskData);
            }

            function renderCardAsForm(cardEl, taskData) {
                cardEl.innerHTML = getCardEditHtml(taskData);
            }

            function getCardDisplayHtml(taskData) {
                const categoryClass = (taskData.category || '').replace(/\s+/g, '-').toLowerCase();
                const taskUrl = `EditTareaProyecto?code=${taskData.id}`;
                let html = `<div class="delete-task-btn" title="Marcar para eliminar"><i class="fa-solid fa-trash-alt"></i></div>
                            <div class="card-priority ${categoryClass}"></div>
                            <div class="card-main-content">
                                <div class='card-subject'><a href="${taskUrl}" onclick="event.stopPropagation()">${taskData.title || '(Sin título)'}</a></div>
                                <div class='card-description'>${taskData.description || ''}</div>`;
                if (taskData.category) html += `<div class='card-footer-details'><div class='card-assignee'>${taskData.category}</div>`;
                if (taskData.dueDate) {
                    const dateParts = taskData.dueDate.split('-');
                    const taskDate = new Date(dateParts[2], dateParts[1] - 1, dateParts[0]);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    const isOverdue = taskDate < today;
                    html += `<div class='base-class ${isOverdue ? "is-overdue" : ""}'>
                                <i class="fa-solid fa-calendar-alt fa-fw"></i>
                                <span>${taskData.dueDate}</span>
                             </div>`;
                }
                html += `</div></div>`;
                return html;
            }

            function getCardEditHtml(taskData) {
                return `
                    <form class="inline-task-form" onsubmit="return false;">
                        <div class="mb-2"><input type="text" name="title" class="form-control form-control-sm" placeholder="Título..." value="${taskData.title || ''}" required></div>
                        <div class="mb-2"><textarea name="description" class="form-control form-control-sm" placeholder="Descripción...">${taskData.description || ''}</textarea></div>
                        <div class="mb-2">
                            <select name="category" class="form-select form-select-sm">
                                <option value="" ${!taskData.category ? 'selected' : ''}>Sin categoría</option>
                                <option value="Diseño Web" ${taskData.category === 'Diseño Web' ? 'selected' : ''}>Diseño Web</option>
                                <option value="SEO" ${taskData.category === 'SEO' ? 'selected' : ''}>SEO</option>
                                <option value="Publicacion Anuncios" ${taskData.category === 'Publicacion Anuncios' ? 'selected' : ''}>P. Anuncios</option>
                                <option value="RRSS" ${taskData.category === 'RRSS' ? 'selected' : ''}>RRSS</option>
                            </select>
                        </div>
                        <div class="mb-2"><input type="date" name="dueDate" class="form-control form-control-sm" value="${taskData.dueDate || ''}"></div>
                        <div class="text-end">
                            <button type="button" class="btn btn-sm btn-light cancel-inline-btn">Cancelar</button>
                            <button type="button" class="btn btn-sm btn-success save-inline-btn">OK</button>
                        </div>
                    </form>
                `;
            }

            // --- 4. LÓGICA DE GUARDADO (¡CORREGIDA!) ---
        saveButton.addEventListener('click', function() {
            const updates = [];
            const inserts = [];

            document.querySelectorAll('.kanban-board').forEach(boardEl => {
                const idFase = boardEl.dataset.id;
                boardEl.querySelectorAll('.kanban-item').forEach(itemEl => {
                    const idTarea = itemEl.dataset.eid;
                    if (tasksToDelete.has(idTarea)) return;

                    // Leemos los datos SIEMPRE de nuestro array local, que es la fuente de la verdad
                    const taskData = findTaskById(idTarea);
                    if (!taskData || !taskData.title) return;

                    if (idTarea.startsWith('new-')) {
                        inserts.push({ idFase: idFase, ...taskData });
                    } else {
                        updates.push({ idTarea: idTarea, idFase: idFase, ...taskData });
                    }
                });
            });
            const kanbanState = { updates, inserts, deletes: Array.from(tasksToDelete) };
            saveKanbanState(kanbanState);
        });
        // --- FUNCIÓN DE GUARDADO CON LA SOLUCIÓN DEFINITIVA DEL TOKEN ---
       function saveKanbanState(state) {
    const saveUrl = `EditProyecto?action=saveKanbanStateAjax`;
    const formData = new FormData();
    
    // --- ¡LA SOLUCIÓN DEFINITIVA Y ROBUSTA! ---
    // 1. Buscamos el token MÁS RECIENTE en el formulario principal de la página.
    const freshToken = document.querySelector('#formEditProyecto input[name="multireqtoken"]').value;

    formData.append('state', JSON.stringify(state));
    formData.append('idproyecto', projectId);
    // 2. Usamos el token que acabamos de encontrar y el nombre correcto del campo.
    formData.append('multireqtoken', freshToken);

    saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Guardando...';
    saveButton.disabled = true;

    fetch(saveUrl, { method: 'POST', body: formData })
        .then(response => response.json())
        .then(result => {
            if (result.status === 'ok') {
                if(typeof setToast !== 'undefined') setToast(result.message, 'success');
                setTimeout(() => window.location.reload(), 1000);
            } else {
                // Si el token falla, mostramos el mensaje de error del backend
                if(typeof setToast !== 'undefined') setToast(result.message, 'error');
                saveButton.innerHTML = '<i class="fa-solid fa-save fa-fw"></i> Guardar Cambios';
                saveButton.disabled = false;
            }
        })
        .catch(error => {
            if(typeof setToast !== 'undefined') setToast('Error de conexión al guardar.', 'error');
            saveButton.innerHTML = '<i class="fa-solid fa-save fa-fw"></i> Guardar Cambios';
            saveButton.disabled = false;
        });
}

            // --- 5. FUNCIONES AUXILIARES (Con correcciones) ---
        function getTaskDataFromForm(cardEl, taskId) {
            const form = cardEl.querySelector('form');
            return {
                id: taskId,
                title: form.elements.title.value,
                description: form.elements.description.value,
                category: form.elements.category.value,
                dueDate: form.elements.dueDate.value
            };
        }

        function findTaskById(taskId) {
            for (const board of boardsData) {
                const found = board.item.find(task => task.id == taskId);
                if (found) return found;
            }
            return null;
        }

        function addEventListeners() { kanbanContainer.addEventListener('click', handleCardClick); }

        // --- ¡CORRECCIÓN CLAVE 2! ---
        // Esta función ahora también actualiza las tareas nuevas
        function updateLocalTaskData(newData) {
            for (let i = 0; i < boardsData.length; i++) {
                for (let j = 0; j < boardsData[i].item.length; j++) {
                    if (boardsData[i].item[j].id == newData.id) {
                        boardsData[i].item[j] = newData;
                        return;
                    }
                }
            }
        }
        
        function removeLocalTaskData(taskId) {
             for (let i = 0; i < boardsData.length; i++) {
                boardsData[i].item = boardsData[i].item.filter(task => task.id != taskId);
            }
        }
    });

    function colorearHeadersPorTitulo() {
    document.querySelectorAll('.kanban-board header').forEach(headerEl => {
        const titulo = headerEl.querySelector('.kanban-title-board')?.innerText.trim().toLowerCase();

        switch (titulo) {
            case '1.- pendiente':
                headerEl.style.backgroundColor = '#ffcf39'; // amarillo claro
                break;
            case '2.- procesando':
                headerEl.style.backgroundColor = '#66a3ff'; // azul claro
                break;
            case '3.- completado':
                headerEl.style.backgroundColor = '#47cf91'; // verde claro
                break;
            case '4.- cancelada':
                headerEl.style.backgroundColor = '#ff5c6b'; // rojo suave
                break;
            default:
                headerEl.style.backgroundColor = '#e2e3e5'; // gris neutro por defecto
                break;
        }
    });
}

</script>
{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('/Plugins/MartosOS/Assets/CSS/jkanban.css') }}">
    <style>
        /* Estilos Finales y Completos */
        #kanban-container { white-space: nowrap; overflow-x: auto; padding-bottom: 15px; display: flex;}
        .kanban-container { position: relative;  box-sizing: border-box; width: auto; display: flex; flex-wrap: wrap; flex-direction: row; justify-content: center; }
        .kanban-board { padding-bottom: 50px; overflow: hidden; width: 260px !important; border-radius: 8px; margin: 5px; background-color: #e4edff63; display: inline-block; vertical-align: top; white-space: normal; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24); }
        .kanban-board header { padding: 10px; padding-left: 30px; margin-bottom: -10px; border-bottom: none !important; }
        .kanban-title-board { color: #333; font-size: 16px; font-weight: bold; cursor: pointer; }
        .kanban-drag { min-height: 380px; padding: 10px; }
        .kanban-item { color: #333; position: relative; background-color: #fff; box-sizing: border-box; width: 100%; padding: 0px 10px 0px 25px; margin-bottom: 10px; cursor: pointer; border-radius: 4px; box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24); }
        .inline-task-form{ padding-top: 10px;}
        .card-main-content { width: 100%; }
        .card-subject { padding-bottom: 0px; font-weight: 700; font-size: 0.9em; text-decoration: underline; text-transform: capitalize;}
        .card-subject a { color: inherit; text-decoration: none; }
        .card-subject a:hover { text-decoration: underline; }
        .card-description { opacity: 0.8; font-size: 0.8em; margin-bottom: 8px; white-space: normal; word-break: break-word; }
        .card-assignee { opacity: 0.8; font-size: 0.8em; margin-bottom: 8px; }
        .card-priority { position: absolute; top: 10px; bottom: 10px; left: 5px; width: 5px; border-radius: 2px; }
        .diseño-web { background-color: #0d6efd; }
        .seo { background-color: #198754; }
        .publicacion-anuncios { background-color: #ffc107; }
        .rrss { background-color: #dc3545; }
        .card-footer-details { font-size: 0.8em; color: #6c757d; text-align: right; border-top: 1px solid #eee; padding-top: 2px; margin-top: 0px; display: flex; flex-direction: row; justify-content: space-between; }
        .is-overdue { color: #dc3545; font-weight: bold; font-size: 0.8em;}
        .delete-task-btn { position: absolute; top: 5px; right: 5px; cursor: pointer; color: #aaa; display: none; padding: 5px; }
        .kanban-item:hover .delete-task-btn { display: block; }
        .delete-task-btn:hover { color: #dc3545; }
        .to-be-deleted { opacity: 0.5; border: 2px dashed #dc3545; background-color: #ff000020; }
        .nuevat {background-color:#0d6efd; margin-bottom:10px; border:none;}
        .nuevat:hover {background-color: #0b5ed7; /* un tono más oscuro para el hover */}
        footer {display:block;     justify-self: center;}
        .kanban-board footer {position: absolute; bottom: 10px; left: 0; width: 100%; text-align: center;}
        .base-class { color:rgb(0, 0, 0); font-weight: bold; font-size: 0.8em;}
    </style>
{% endblock %}